// To regenerate api.pb.go run hack/update-generated-pod-resources.sh
syntax = "proto3";

package v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

enum TopologyLevel {
    NUMA = 0;
    SOCKET = 1;
}

// PodResourcesLister is a service provided by the kubelet that provides information about the
// node resources consumed by pods and containers on the node
service PodResourcesLister {
    rpc List(ListPodResourcesRequest) returns (ListPodResourcesResponse) {}
    rpc GetAllocatableResources(AllocatableResourcesRequest) returns (AllocatableResourcesResponse) {}
}

message AllocatableResourcesRequest {}

// AllocatableResourcesResponses contains informations about all the devices known by the kubelet
message AllocatableResourcesResponse {
    repeated ContainerDevices devices = 1;
    repeated int64 cpu_ids = 2;
    repeated ContainerMemory memory = 3;
    repeated AllocatableTopologyAwareResource resources = 15;
}

// ListPodResourcesRequest is the request made to the PodResourcesLister service
message ListPodResourcesRequest {}

// ListPodResourcesResponse is the response returned by List function
message ListPodResourcesResponse {
    repeated PodResources pod_resources = 1;
}

// PodResources contains information about the node resources assigned to a pod
message PodResources {
    string name = 1;
    string namespace = 2;
    repeated ContainerResources containers = 3;
    string pod_role = 12;
    string pod_type = 13;
    map<string, string> labels = 14;
    map<string, string> annotations = 15;
}

// ContainerResources contains information about the resources assigned to a container
message ContainerResources {
    string name = 1;
    repeated ContainerDevices devices = 2;
    repeated int64 cpu_ids = 3;
    repeated ContainerMemory memory = 4;
    repeated TopologyAwareResource resources = 15;
}

// ContainerMemory contains information about memory and hugepages assigned to a container
message ContainerMemory {
    string memory_type = 1;
    uint64 size = 2;
    TopologyInfo topology = 3;
}

// ContainerDevices contains information about the devices assigned to a container
message ContainerDevices {
    string resource_name = 1;
    repeated string device_ids = 2;
    TopologyInfo topology = 3;
}


// TopologyAwareResource contains information about the allocated resource information in topology aware format
message TopologyAwareResource {
    string resource_name = 1;
    bool is_node_resource = 2;
    bool is_scalar_resource = 3;
    double aggregated_quantity = 4;
    double original_aggregated_quantity = 5; 
    repeated TopologyAwareQuantity topology_aware_quantity_list = 6;
    repeated TopologyAwareQuantity original_topology_aware_quantity_list = 7;
}

// AllocatableTopologyAwareResource contains information about the allocatable resource information in topology aware format
message AllocatableTopologyAwareResource {
    string resource_name = 1;
    bool is_node_resource = 2;
    bool is_scalar_resource = 3;
    double aggregated_allocatable_quantity = 4;
    repeated TopologyAwareQuantity topology_aware_allocatable_quantity_list = 5;
    double aggregated_capacity_quantity = 6;
    repeated TopologyAwareQuantity topology_aware_capacity_quantity_list = 7;
}

message TopologyAwareQuantity {
    double resource_value = 1;
    // node indicates the id of the machine topology level the resource affinitive to
    uint64 node = 2;
    // name represents the name of the object providing the resource
    // for example set name to eth0 for resource bandwidth
    string name = 3;
    // type represents resource kind
	// for example, NIC, Disk and so on
    string type = 4;
    // topology_level indicates the resource affinitive to which level of machine topology
    // for example, NUMA, SOCKET
    TopologyLevel topology_level = 5;
    map<string, string> annotations = 6;
}

// Topology describes hardware topology of the resource
message TopologyInfo {
    repeated NUMANode nodes = 1;
}

// NUMA representation of NUMA node
message NUMANode {
    int64 ID = 1;
}
