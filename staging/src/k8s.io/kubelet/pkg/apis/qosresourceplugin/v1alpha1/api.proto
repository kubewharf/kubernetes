// To regenerate api.pb.go run hack/update-generated-resource-plugin.sh
syntax = 'proto3';

package v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "k8s.io/kubelet/pkg/apis/qosresourceplugin/v1alpha1";
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;


// Registration is the service advertised by the Kubelet
// Only when Kubelet answers with a success code to a Register Request
// may Resource Plugins start their service
// Registration may fail when resource plugin version is not supported by
// Kubelet or the registered resourceName is already taken by another
// active resource plugin. Resource plugin is expected to terminate upon registration failure
service Registration {
	rpc Register(RegisterRequest) returns (Empty) {}
}

message ResourcePluginOptions {
	// Indicates if PreStartContainer call is required before each container start
	bool pre_start_required = 1;
	// Indicates if GetPreferredAllocation is implemented and available for calling
	bool get_preferred_allocation_available = 2;
}

message RegisterRequest {
	// Version of the API the Resource Plugin was built against
	string version = 1;
	// Name of the unix socket the resource plugin is listening on
	// PATH = path.Join(ResourcePluginPath, endpoint)
	string endpoint = 2;
	// Schedulable resource name. As of now it's expected to be a DNS Label
	string resource_name = 3;
	// Options to be communicated with Resource Manager
	ResourcePluginOptions options = 4;
}

message ResourceRequest {
	string pod_uid = 1;
	string container_uid = 2;
	string pod_name = 3;
	string container_name = 4;
	string pod_role = 5;
    string pod_type = 6;
    string resource_name = 7;
    uint64 bit_mask = 8;
    map<string,double> resource_requests = 9;
}

message ResourceHintsResponse {
	string pod_uid = 1;
	string container_uid = 2;
	string pod_name = 3;
	string container_name = 4;
	string pod_role = 5;
    string pod_type = 6;
    string resource_name = 7;
    map<string,ListOfTopologyHints> resource_hints = 8;
}

message ResourceAllocationResponse {
	string pod_uid = 1;
	string container_uid = 2;
	string pod_name = 3;
	string container_name = 4;
	string pod_role = 5;
    string pod_type = 6;
    string resource_name = 7;
    ResourceAllocationInfo allocatation_result = 8;
}

message ListOfTopologyHints {
    repeated TopologyHint hints = 1;
}

message TopologyHint {
    uint64 bit_mask = 1;
    bool preferred = 2;
}

message Empty {
	string pod_name = 1;
}

message RemovePodRequest {
	string pod_name = 1;
    string pod_namespace = 2;
}

message RemovePodResponse {
}

message GetResourcesAllocationRequest {
}

message GetResourcesAllocationResponse {
    map<string,ContainerResources> pod_resources = 1;
}

message ContainerResources {
    map<string,ResourceAllocation> container_resources = 1; 
}

message ResourceAllocation {
    map<string,ResourceAllocationInfo> resource_allocation = 1;
}

message ResourceAllocationInfo {
	string oci_property_name = 1;
    string allocatation_result = 2;
    map<string,string> envs = 3;
    map<string,string> annotations = 4;
}

message GetTopologyAwareResourcesRequest {
	string pod_uid = 1;
	string container_name = 2;
}

message GetTopologyAwareResourcesResponse {
    string pod_uid = 1;
    string pod_name = 2;
    string pod_namespace = 3;
    repeated ContainerTopologyAwareResources container_topology_aware_resources = 4;
}

message ContainerTopologyAwareResources {
    string container_name = 1;
    TopologyAwareResources allocated_resources = 2;
}

message TopologyAwareResources {
    map<string, ListOfTopologyAwareQuantity> topology_aware_resources = 1;
}

message ListOfTopologyAwareQuantity {
    repeated TopologyAwareQuantity topology_aware_quantity_list = 1;
}

message TopologyAwareQuantity {
    string resource_value = 1;
    uint64 nodes = 2;
}

message GetTopologyAwareAllocatableResourcesRequest {
}

message GetTopologyAwareAllocatableResourcesResponse {
    TopologyAwareResources allocatable_resources = 1;
}

// - PreStartContainer is expected to be called before each container start if indicated by plugin during registration phase.
// - PreStartContainer allows kubelet to pass reinitialized resources to containers.
// - PreStartContainer allows Resource Plugin to run resource specific operations on
//   the resources requested
message PreStartContainerRequest {
	string pod_uid = 1;
	string container_uid = 2;
	string pod_name = 3;
	string container_name = 4;
}

// PreStartContainerResponse will be send by plugin in response to PreStartContainerRequest
message PreStartContainerResponse {
}

// ResourcePlugin is the service advertised by Resource Plugins
service ResourcePlugin {
	// GetTopologyHints returns hints of corresponding resources
    rpc GetTopologyHints(ResourceRequest) returns (ResourceHintsResponse) 

	// Notify the resource plugin that the pod has beed deleted,
    // and the plugin should do some clear-up work.
    rpc RemovePod(RemovePodRequest) returns (RemovePodResponse)

    // GetResourcesAllocation returns allocation results of corresponding resources
    rpc GetResourcesAllocation(GetResourcesAllocationRequest) returns (GetResourcesAllocationResponse)

    // GetTopologyAwareResources returns allocation results of corresponding resources as topology aware format
    rpc GetTopologyAwareResources(GetTopologyAwareResourcesRequest) returns (GetTopologyAwareResourcesResponse)

    // GetTopologyAwareResources returns corresponding allocatable resources as topology aware format
    rpc GetTopologyAwareAllocatableResources(GetTopologyAwareAllocatableResourcesRequest) returns (GetTopologyAwareAllocatableResourcesResponse)

	// GetResourcePluginOptions returns options to be communicated with Resource
	// Manager
	rpc GetResourcePluginOptions(Empty) returns (ResourcePluginOptions) {}

	// Allocate is called during pod admit so that the resource
	// plugin can allocate corresponding resource for the container 
    // according to resource request
    rpc Allocate(ResourceRequest) returns (ResourceAllocationResponse) {}

	// PreStartContainer is called, if indicated by resource plugin during registeration phase,
	// before each container start. Resource plugin can run resource specific operations
	// such as resetting the resource before making resources available to the container
	rpc PreStartContainer(PreStartContainerRequest) returns (PreStartContainerResponse) {}
}
