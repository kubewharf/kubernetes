/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog"
)

type PodListerExpansion interface {
	PodsForTCELabel(namespace, indexName string) PodTCELabelLister
}

func (s *podLister) PodsForTCELabel(namespace, indexName string) PodTCELabelLister {
	return podTCELabelLister{
		indexer:   s.indexer,
		namespace: namespace,
		indexName: indexName,
	}
}

type PodTCELabelLister interface {
	List(labelSelector *metav1.LabelSelector) (ret []*v1.Pod, err error)
}

type podTCELabelLister struct {
	indexer   cache.Indexer
	namespace string
	indexName string
}

func (s podTCELabelLister) List(labelSelector *metav1.LabelSelector) (ret []*v1.Pod, err error) {
	items, err := s.indexer.Index(s.indexName, &metav1.ObjectMeta{Labels: labelSelector.MatchLabels})
	if err != nil {
		// Ignore error; do slow search without index.
		klog.Warningf("can not retrieve list of objects using index : %v", err)

		selector, err := metav1.LabelSelectorAsSelector(labelSelector)
		if err != nil {
			return ret, err
		}
		for _, m := range s.indexer.List() {
			metadata, err := meta.Accessor(m)
			if err != nil {
				return nil, err
			}
			if metadata.GetNamespace() == s.namespace && selector.Matches(labels.Set(metadata.GetLabels())) {
				ret = append(ret, m.(*v1.Pod))
			}
		}
		return ret, nil
	}
	for _, m := range items {
		ret = append(ret, m.(*v1.Pod))
	}
	return ret, nil
}

// PodNamespaceListerExpansion allows custom methods to be added to
// PodNamespaceLister.
type PodNamespaceListerExpansion interface{}
