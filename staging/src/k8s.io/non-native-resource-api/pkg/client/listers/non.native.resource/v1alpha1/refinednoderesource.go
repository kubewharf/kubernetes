/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/non-native-resource-api/pkg/apis/non.native.resource/v1alpha1"
)

// RefinedNodeResourceLister helps list RefinedNodeResources.
type RefinedNodeResourceLister interface {
	// List lists all RefinedNodeResources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RefinedNodeResource, err error)
	// Get retrieves the RefinedNodeResource from the index for a given name.
	Get(name string) (*v1alpha1.RefinedNodeResource, error)
	RefinedNodeResourceListerExpansion
}

// refinedNodeResourceLister implements the RefinedNodeResourceLister interface.
type refinedNodeResourceLister struct {
	indexer cache.Indexer
}

// NewRefinedNodeResourceLister returns a new RefinedNodeResourceLister.
func NewRefinedNodeResourceLister(indexer cache.Indexer) RefinedNodeResourceLister {
	return &refinedNodeResourceLister{indexer: indexer}
}

// List lists all RefinedNodeResources in the indexer.
func (s *refinedNodeResourceLister) List(selector labels.Selector) (ret []*v1alpha1.RefinedNodeResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RefinedNodeResource))
	})
	return ret, err
}

// Get retrieves the RefinedNodeResource from the index for a given name.
func (s *refinedNodeResourceLister) Get(name string) (*v1alpha1.RefinedNodeResource, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("refinednoderesource"), name)
	}
	return obj.(*v1alpha1.RefinedNodeResource), nil
}
