// Code generated by mockery v1.0.0. DO NOT EDIT.

package testing

import mock "github.com/stretchr/testify/mock"

// TCEInterface is an autogenerated mock type for the TCEInterface type
type TCEInterface struct {
	mock.Mock
}

// GetLoad provides a mock function with given fields: podname
func (_m *TCEInterface) GetLoad(podname string) float64 {
	ret := _m.Called(podname)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(podname)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *TCEInterface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *TCEInterface) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThresholdsMet provides a mock function with given fields: softLimit, hardLimit
func (_m *TCEInterface) ThresholdsMet(softLimit int64, hardLimit int64) (bool, bool) {
	ret := _m.Called(softLimit, hardLimit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int64) bool); ok {
		r0 = rf(softLimit, hardLimit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(int64, int64) bool); ok {
		r1 = rf(softLimit, hardLimit)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
