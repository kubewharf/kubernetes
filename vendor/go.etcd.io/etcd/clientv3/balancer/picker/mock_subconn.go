// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bytedance/Documents/workspace/go/src/code.byted.org/tce/kubernetes/vendor/google.golang.org/grpc/balancer/balancer.go

// Package picker is a generated GoMock package.
package picker

import (
	context "context"
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	balancer "google.golang.org/grpc/balancer"
	connectivity "google.golang.org/grpc/connectivity"
	resolver "google.golang.org/grpc/resolver"
	serviceconfig "google.golang.org/grpc/serviceconfig"
	reflect "reflect"
)

// MockSubConn is a mock of SubConn interface
type MockSubConn struct {
	ctrl     *gomock.Controller
	recorder *MockSubConnMockRecorder
}

// MockSubConnMockRecorder is the mock recorder for MockSubConn
type MockSubConnMockRecorder struct {
	mock *MockSubConn
}

// NewMockSubConn creates a new mock instance
func NewMockSubConn(ctrl *gomock.Controller) *MockSubConn {
	mock := &MockSubConn{ctrl: ctrl}
	mock.recorder = &MockSubConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubConn) EXPECT() *MockSubConnMockRecorder {
	return m.recorder
}

// UpdateAddresses mocks base method
func (m *MockSubConn) UpdateAddresses(arg0 []resolver.Address) {
	m.ctrl.Call(m, "UpdateAddresses", arg0)
}

// UpdateAddresses indicates an expected call of UpdateAddresses
func (mr *MockSubConnMockRecorder) UpdateAddresses(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockSubConn)(nil).UpdateAddresses), arg0)
}

// Connect mocks base method
func (m *MockSubConn) Connect() {
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect
func (mr *MockSubConnMockRecorder) Connect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSubConn)(nil).Connect))
}

// MockClientConn is a mock of ClientConn interface
type MockClientConn struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnMockRecorder
}

// MockClientConnMockRecorder is the mock recorder for MockClientConn
type MockClientConnMockRecorder struct {
	mock *MockClientConn
}

// NewMockClientConn creates a new mock instance
func NewMockClientConn(ctrl *gomock.Controller) *MockClientConn {
	mock := &MockClientConn{ctrl: ctrl}
	mock.recorder = &MockClientConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientConn) EXPECT() *MockClientConnMockRecorder {
	return m.recorder
}

// NewSubConn mocks base method
func (m *MockClientConn) NewSubConn(arg0 []resolver.Address, arg1 balancer.NewSubConnOptions) (balancer.SubConn, error) {
	ret := m.ctrl.Call(m, "NewSubConn", arg0, arg1)
	ret0, _ := ret[0].(balancer.SubConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSubConn indicates an expected call of NewSubConn
func (mr *MockClientConnMockRecorder) NewSubConn(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubConn", reflect.TypeOf((*MockClientConn)(nil).NewSubConn), arg0, arg1)
}

// RemoveSubConn mocks base method
func (m *MockClientConn) RemoveSubConn(arg0 balancer.SubConn) {
	m.ctrl.Call(m, "RemoveSubConn", arg0)
}

// RemoveSubConn indicates an expected call of RemoveSubConn
func (mr *MockClientConnMockRecorder) RemoveSubConn(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubConn", reflect.TypeOf((*MockClientConn)(nil).RemoveSubConn), arg0)
}

// UpdateBalancerState mocks base method
func (m *MockClientConn) UpdateBalancerState(s connectivity.State, p balancer.Picker) {
	m.ctrl.Call(m, "UpdateBalancerState", s, p)
}

// UpdateBalancerState indicates an expected call of UpdateBalancerState
func (mr *MockClientConnMockRecorder) UpdateBalancerState(s, p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalancerState", reflect.TypeOf((*MockClientConn)(nil).UpdateBalancerState), s, p)
}

// UpdateState mocks base method
func (m *MockClientConn) UpdateState(arg0 balancer.State) {
	m.ctrl.Call(m, "UpdateState", arg0)
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockClientConnMockRecorder) UpdateState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockClientConn)(nil).UpdateState), arg0)
}

// ResolveNow mocks base method
func (m *MockClientConn) ResolveNow(arg0 resolver.ResolveNowOptions) {
	m.ctrl.Call(m, "ResolveNow", arg0)
}

// ResolveNow indicates an expected call of ResolveNow
func (mr *MockClientConnMockRecorder) ResolveNow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNow", reflect.TypeOf((*MockClientConn)(nil).ResolveNow), arg0)
}

// Target mocks base method
func (m *MockClientConn) Target() string {
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(string)
	return ret0
}

// Target indicates an expected call of Target
func (mr *MockClientConnMockRecorder) Target() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockClientConn)(nil).Target))
}

// MockBuilder is a mock of Builder interface
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockBuilder) Build(cc balancer.ClientConn, opts balancer.BuildOptions) balancer.Balancer {
	ret := m.ctrl.Call(m, "Build", cc, opts)
	ret0, _ := ret[0].(balancer.Balancer)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockBuilderMockRecorder) Build(cc, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build), cc, opts)
}

// Name mocks base method
func (m *MockBuilder) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockBuilderMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBuilder)(nil).Name))
}

// MockConfigParser is a mock of ConfigParser interface
type MockConfigParser struct {
	ctrl     *gomock.Controller
	recorder *MockConfigParserMockRecorder
}

// MockConfigParserMockRecorder is the mock recorder for MockConfigParser
type MockConfigParserMockRecorder struct {
	mock *MockConfigParser
}

// NewMockConfigParser creates a new mock instance
func NewMockConfigParser(ctrl *gomock.Controller) *MockConfigParser {
	mock := &MockConfigParser{ctrl: ctrl}
	mock.recorder = &MockConfigParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigParser) EXPECT() *MockConfigParserMockRecorder {
	return m.recorder
}

// ParseConfig mocks base method
func (m *MockConfigParser) ParseConfig(LoadBalancingConfigJSON json.RawMessage) (serviceconfig.LoadBalancingConfig, error) {
	ret := m.ctrl.Call(m, "ParseConfig", LoadBalancingConfigJSON)
	ret0, _ := ret[0].(serviceconfig.LoadBalancingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseConfig indicates an expected call of ParseConfig
func (mr *MockConfigParserMockRecorder) ParseConfig(LoadBalancingConfigJSON interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConfig", reflect.TypeOf((*MockConfigParser)(nil).ParseConfig), LoadBalancingConfigJSON)
}

// MockPicker is a mock of Picker interface
type MockPicker struct {
	ctrl     *gomock.Controller
	recorder *MockPickerMockRecorder
}

// MockPickerMockRecorder is the mock recorder for MockPicker
type MockPickerMockRecorder struct {
	mock *MockPicker
}

// NewMockPicker creates a new mock instance
func NewMockPicker(ctrl *gomock.Controller) *MockPicker {
	mock := &MockPicker{ctrl: ctrl}
	mock.recorder = &MockPickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPicker) EXPECT() *MockPickerMockRecorder {
	return m.recorder
}

// Pick mocks base method
func (m *MockPicker) Pick(ctx context.Context, info balancer.PickInfo) (balancer.SubConn, func(balancer.DoneInfo), error) {
	ret := m.ctrl.Call(m, "Pick", ctx, info)
	ret0, _ := ret[0].(balancer.SubConn)
	ret1, _ := ret[1].(func(balancer.DoneInfo))
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pick indicates an expected call of Pick
func (mr *MockPickerMockRecorder) Pick(ctx, info interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockPicker)(nil).Pick), ctx, info)
}

// MockV2Picker is a mock of V2Picker interface
type MockV2Picker struct {
	ctrl     *gomock.Controller
	recorder *MockV2PickerMockRecorder
}

// MockV2PickerMockRecorder is the mock recorder for MockV2Picker
type MockV2PickerMockRecorder struct {
	mock *MockV2Picker
}

// NewMockV2Picker creates a new mock instance
func NewMockV2Picker(ctrl *gomock.Controller) *MockV2Picker {
	mock := &MockV2Picker{ctrl: ctrl}
	mock.recorder = &MockV2PickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockV2Picker) EXPECT() *MockV2PickerMockRecorder {
	return m.recorder
}

// Pick mocks base method
func (m *MockV2Picker) Pick(info balancer.PickInfo) (balancer.PickResult, error) {
	ret := m.ctrl.Call(m, "Pick", info)
	ret0, _ := ret[0].(balancer.PickResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pick indicates an expected call of Pick
func (mr *MockV2PickerMockRecorder) Pick(info interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockV2Picker)(nil).Pick), info)
}

// MockBalancer is a mock of Balancer interface
type MockBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerMockRecorder
}

// MockBalancerMockRecorder is the mock recorder for MockBalancer
type MockBalancerMockRecorder struct {
	mock *MockBalancer
}

// NewMockBalancer creates a new mock instance
func NewMockBalancer(ctrl *gomock.Controller) *MockBalancer {
	mock := &MockBalancer{ctrl: ctrl}
	mock.recorder = &MockBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalancer) EXPECT() *MockBalancerMockRecorder {
	return m.recorder
}

// HandleSubConnStateChange mocks base method
func (m *MockBalancer) HandleSubConnStateChange(sc balancer.SubConn, state connectivity.State) {
	m.ctrl.Call(m, "HandleSubConnStateChange", sc, state)
}

// HandleSubConnStateChange indicates an expected call of HandleSubConnStateChange
func (mr *MockBalancerMockRecorder) HandleSubConnStateChange(sc, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSubConnStateChange", reflect.TypeOf((*MockBalancer)(nil).HandleSubConnStateChange), sc, state)
}

// HandleResolvedAddrs mocks base method
func (m *MockBalancer) HandleResolvedAddrs(arg0 []resolver.Address, arg1 error) {
	m.ctrl.Call(m, "HandleResolvedAddrs", arg0, arg1)
}

// HandleResolvedAddrs indicates an expected call of HandleResolvedAddrs
func (mr *MockBalancerMockRecorder) HandleResolvedAddrs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResolvedAddrs", reflect.TypeOf((*MockBalancer)(nil).HandleResolvedAddrs), arg0, arg1)
}

// Close mocks base method
func (m *MockBalancer) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockBalancerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBalancer)(nil).Close))
}

// MockV2Balancer is a mock of V2Balancer interface
type MockV2Balancer struct {
	ctrl     *gomock.Controller
	recorder *MockV2BalancerMockRecorder
}

// MockV2BalancerMockRecorder is the mock recorder for MockV2Balancer
type MockV2BalancerMockRecorder struct {
	mock *MockV2Balancer
}

// NewMockV2Balancer creates a new mock instance
func NewMockV2Balancer(ctrl *gomock.Controller) *MockV2Balancer {
	mock := &MockV2Balancer{ctrl: ctrl}
	mock.recorder = &MockV2BalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockV2Balancer) EXPECT() *MockV2BalancerMockRecorder {
	return m.recorder
}

// UpdateClientConnState mocks base method
func (m *MockV2Balancer) UpdateClientConnState(arg0 balancer.ClientConnState) error {
	ret := m.ctrl.Call(m, "UpdateClientConnState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientConnState indicates an expected call of UpdateClientConnState
func (mr *MockV2BalancerMockRecorder) UpdateClientConnState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientConnState", reflect.TypeOf((*MockV2Balancer)(nil).UpdateClientConnState), arg0)
}

// ResolverError mocks base method
func (m *MockV2Balancer) ResolverError(arg0 error) {
	m.ctrl.Call(m, "ResolverError", arg0)
}

// ResolverError indicates an expected call of ResolverError
func (mr *MockV2BalancerMockRecorder) ResolverError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolverError", reflect.TypeOf((*MockV2Balancer)(nil).ResolverError), arg0)
}

// UpdateSubConnState mocks base method
func (m *MockV2Balancer) UpdateSubConnState(arg0 balancer.SubConn, arg1 balancer.SubConnState) {
	m.ctrl.Call(m, "UpdateSubConnState", arg0, arg1)
}

// UpdateSubConnState indicates an expected call of UpdateSubConnState
func (mr *MockV2BalancerMockRecorder) UpdateSubConnState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubConnState", reflect.TypeOf((*MockV2Balancer)(nil).UpdateSubConnState), arg0, arg1)
}

// Close mocks base method
func (m *MockV2Balancer) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockV2BalancerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockV2Balancer)(nil).Close))
}
